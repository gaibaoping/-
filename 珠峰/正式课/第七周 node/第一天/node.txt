1、什么是NODE
    NODE不是一门语言，它和浏览器很相似，只是一个渲染和解析JS代码的平台，而且这个平台渲染JS的引擎是谷歌的V8引擎
    之前JS只是一门轻量级的客户端脚本编程语言（因为之前只能运行在客户端的浏览器中），现在我们可以把服务器安装一个NODE平台，我们使用JS代码开发服务器端的程序，最后由NODE平台把JS代码执行即可，所以从现在开始：JS是一门轻量级的全栈开发语言，和市面上流行的PHP、JAVA、C#等同样的重要了
2、NODE有什么特点
    基于V8引擎：JS写的服务器端程序运行更快
    当线程异步基于事件驱动处理的
    无阻塞I/O操作（文件操作）：
        当JS代码在客户端的浏览器中运行的时候，为了保证用户电脑信息的安全，浏览器是禁止JS代码操作客户本地的文件的（客户端的JS没有I/O操作）
        当JS运行在服务器端的NODE环境下，NODE允许JS操作服务器上的文件

3、NODE和谷歌浏览器的区别
    谷歌浏览器的全局对象叫做：window
    NODE环境下的全局对象叫做：global  在NODE下写JS不需要考虑兼容

4、如何在NODE环境下运行JS？
    1)在WB中，右键，Run xxx.js，这样也相当于使用NODE.EXE把我们的代码执行了（有时候会出现缓存）
    2)DOS命令中执行NODE的命令，从而把JS代码执行
        找到当前JS文件所在的目录，通过Shift+右键 ->在此处打开命令窗口，在DOS窗口中执行node xxx.js 把某一个JS文件下的代码执行
    3)使用NODE在RPEL命令编写和执行JS代码（相当于浏览器控制台中输入JS代码执行）

5、NODE的模块
    内置模块：NODE平台提供的
        服务器端一般需要处理的事情：
            ->创建一个服务，并且服务监听一个端口 http
            ->接收客户端的请求  url
            ->从服务器指定的文件目录下，读取出文件中的内容    fs
            ->把读取的内容返回给客户端  http

    自定义模块：自己写的
        在NODE环境下，只要我们新创建一个JS，都可以相当于新创建一个自定义模块，例如：我创建一个A.js，其实也就相当于创建了一个A模块。
        每一个模块都是独立的一个空间，和其他模块之间不会产生任何的冲突，例如：A中有一个fn方法，B中也有fn方法，但是A和B的fn是不同的两个方法不会有任何的冲突

        在B模块中使用A中的方法:
        ->在B中导入A：var a = require('./A');
        ->在A中导出需要供别人使用的方法：module.exports = {sum:sum}
        ->在B中：a.sum();

        课堂练习：
        我有三个模块:TEST1、TEST2、TEST3,TEST1中有一个sum方法实现任意数求和,TEST2中有一个avgFn方法实现任意数求平均数(首先调取TEST1中的sum,求和后求平均数),TEST3中导入TEST2,执行avgFn(12,23,34,45,56,67);求出平均数

    第三方模块：别人写好的，我们来使用 下载、引入、使用
        NODE下第三方模块的管理统一使用npm命令，我们需要使用的第三方模块都可以在https://www.npmjs.com这个网站找到
        安装第三方模块：
            npm install less  安装到当前目录下（只有当前的项目可以使用less模块）
            npm install less -g 把模块安装到全局下（所有的项目都可以使用less模块）
        卸载第三方模块
            npm uninstall less  在当前目录下卸载模块
            npm uninstall less -g 在全局下卸载模块

        导入第三方模块
            在需要导入模块的JS中：
                var lessM = require('less');
        导入成功后就可以调取对应的方法执行了
            lessM.render();

6、HTTP模块
    ->var server1 = http.createServer([callback]);
        http..createServer:创建一个服务
        server1：就是我们当前创建出来的这个服务
        [callback]:这个回调函数不是在服务创建成功的时候才执行，而是在客户端向当前的服务发送请求的时候才会执行（换句话说，我们雇一个服务员，只有当客户买东西的时候，服务员才会去工作，[callback]其实就是服务员的工作）

    ->server1.listen(80,[callback]);
        给当前创建出来的这个服务监听一个端口号80，[callback]是传递进来的回调函数，当端口监听成功后就会执行这个方法

    当服务创建成功后，客户端的浏览器可以通过输入
        http://localhost:80/ 通过LOCALHOST本地域名访问
        http://192.168.0.3:80/ 通过本机的IP地址访问

    问题总结：
        ->ERROR:listen EACCES 0.0.0.80  说明当前的80端口被其他的服务占用了，我们需要换一个其他的端口号
        ->在浏览器中输入：localhost:80 访问不了  尝试关掉自己电脑的防火墙

7、URL模块
    在此模块中提供一个叫parse方法，可以把一个URL地址的各部分进行解析

8、FS模块
    在此模块中提供了一些方法，


->前端优化的一个手段：尽量减少HTTP的请求
    回去总结都有哪些减少HTTP请求的手段？


作业：
    1、获取后在全局下安装LESS
        npm install less -g
        检测是否安装成功
        lessc -v  如果出现了版本号则代表安装成功
    2、预习
        课时133和134
