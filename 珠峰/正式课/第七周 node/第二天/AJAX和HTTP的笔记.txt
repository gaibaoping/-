1、HTTP
    Request:请求阶段，客户端向服务器端发送请求
    Response：响应阶段，服务器端把内容返回给客户端

    客户端和服务器端可以进行内容或者数据的传输
    ->客户端可以把内容传给服务器
    ->服务器也可以把内容传送给客户端
    都是通过传输协议（HTTP）进行传输的

2、HTTP报文:客户端和服务器端传输的内容统称为HTTP报文

    起始行：请求起始行 响应起始行

    首部(头)：通用头信息（请求和响应都有的）  请求头信息  响应头信息  自定义首部（自定义的请求头，自定义的相应头）

    主体：请求主体  响应主体

    在谷歌浏览器的控制台network选项中可以查看当前客户端和服务器端的“全部”请求信息，而且客户端和服务器端传输的所有内容都可以在这里看到

    ->请求头：客户端设置的，服务器端获取的，真实项目中我们有些时候，客户端会把一些内容放在请求头中传递给服务器，例如：客户端可以把COOKIE信息通过请求头传递给服务器
    ->响应头：服务器端设置的，客户端获取的。 真实项目中我们有些时候，服务器端会把一些内容放在响应头信息中传递给客户端，例如：服务器端在开始给客户端返回内容的时候会把当前服务器的时间放在响应头信息中(Date)返回给客户端，而且存储的这个时间是“格林尼治时间GMT+0000”

    主体才是主要用来实现客户端和服务端传输的
    ->请求主体：客户端一般都会把需要传递给服务器的内容放在请求主体中，服务器端可以从请求主体中接收到客户端传递的内容
    ->响应主体：服务器端把需要给客户端返回的内容放在响应主体中，客户端可以在响应主体中获取这些内容


    总结：
    客户端传递给服务器端内容
    ->URL问号传参：客户端在请求URL中通过问号传参的方式把内容传递给服务器
    http://localhost:80/getAlllist?name=zf&age=7
    ->设置请求头信息
    ->设置请求主体信息

    服务器端给客户端传递内容
    ->设置响应头信息
    ->设置响应主体信息

3、AJAX基础知识
   1、 什么是AJAX？AJAX有什么作用？
    AJAX：Async(Asynchronous) JavaScript AND XML  异步的JS和XML  异步指的是：客户端和服务器端进行交互不需要把整个页面重新刷新，只需要把操作的这部分更新一下（局部刷新），换句话说这里的异步指的是和服务器交互后是整个页面刷新还是局部刷新

    AJAX的作用：实现客户端和服务器之间的交互，对于资源文件的请求处理一般不需要使用AJAX，浏览器本身就可以完成资源文件的请求和代码的渲染，我们使用AJAX进行前后台交互主要是请求数据的（我们使用JS中的AJAX技术，向服务器端发送请求，然后从服务器端获取到我们需要展示的数据，然后再进行数据绑定）

    如何使用AJAX？
        主要分四步：
            1、创建一个AJAX对象，下面这种方式不兼容IE6及更低版本浏览器，需要处理兼容  课时137
            var xhr = new XMLHttpRequest;
            2、配置AJAX请求的一些参数
                xhr.open([HTTP METHOD],[REQUEST URL],[Async|Sync],[USER NAME],[USER PASS]);
            xhr.open('get','json/TEST.json',false);
            AJAX同步或异步编程（课时139(难) 140）

            3、xhr.onreadystatechange监听AJAX状态和网络状态，根据不同的状态做不同的事情
            xhr.readyState:0 1 2 3 4(AJAX状态)
            xhr.status:200 301 302 304 401 402 404 500...（网络状态）

            4、xhr.send 发送AJAX请求

2、HTTP Method（HTTP请求的方式）
    [GET]
    get:从服务器端获取数据   （客户端给服务器端的内容少，而服务器端给客户端的内容多，一般项目开发过程中使用GET请求最多了）
    delete：从服务器上删除内容  （QQ空间相册，我们想把之前上传的图片在服务器上删除）
    Head：只获取服务器端的响应头信息，响应主体内容不获取    （经常应用于客户端只想获取服务器的时间，这样在响应头中就有服务器的时间了，主体内容可以不用获取）

    [POST]
    post：向服务器端推送数据   （客户端给服务器端的内容多，而服务器端给客户端的内容少，例如：用户注册，客户端需要把很多的用户信息传递给服务器端，而服务器端只需要返回成功或者失败，这样的情况我们使用post）
    put：在服务器上存放内容   （QQ空间的相册，我们上传图片其实就可以使用put请求）
    ...

    这些请求方式从本质上是没有太大区别的，不管使用哪一种方式客户端都可以把内容传给服务器，服务器也可以把内容传递给客户端，而我们接下来讲解的请求方式区别仅仅是目前市场上大家约定俗称的一些规范而已。

    [GET] PK [POST]
    ->一般项目中，我们使用GET请求传递给服务器的数据都是通过问号传参的方式传递的；而使用post请求，传给服务器的内容都是放在请求主体当中传递给服务器的；
    区别：
        get
        var xhr = new XMLHttpRequest;
        xhr.open('GET','/getAllList?name=zf&age=8',true);
        xhr.onreadystatechange=function(){}
        xhr.send(null);

        post
        var xhr = new XMLHttpRequest;
        xhr.open('GET','/getAllList',true);
        xhr.onreadystatechange=function(){}
        xhr.send('{"name":"zf","age":8}');//send中存放的内容就是请求主体的内容（一般传递给服务器的请求主体内容都是JSON格式的字符串）

    1)大小限制问题
        GET传给服务器的内容少，POST传递给服务器的内容多
        因为GET请求一般都是把要传递的内容放在URL的末尾，通过问号传参的方式传递的，如果传递的内容多，请求的URL就会很长，而浏览器对于URL地址的长度是有限制的：谷歌8KB、火狐7KB、IE2KB，超出部分浏览器会把其进行截取
        而POST是放在请求主体中传递给服务器的，理论上不存在大小的限制，但是在真实项目中为了保证传输的速度，我们一般也会限制大小，例如：我之前做的图片上传，一般限定用户上传图片的大小在2M以内。

    2)缓存问题
        GET请求经常出现缓存（这个缓存是浏览器和服务器之间的一些猫腻，我们项目中一般是不想要这些缓存的，因为不可控，项目中真正使用的缓存都是我们使用相关技术去实现的），而POST请求浏览器不会给其默认进行缓存。
        清除GET请求的缓存：在每一请求的URL地址的后面加随机数
        xhr.open('GET','/getAllList?name=zf&age=8&_='+Math.random(),true);

    3)安全问题
        GET请求相对于POST请求不太安全，因为GET请求把传递给服务器的内容都放在URL上了，而有一种黑客手段叫做URL劫持，可以获取我们传递给服务器端的内容，所以项目中客户端如果需要传递一些重要信息给服务器，我们一般都是用POST请求，例如：用户登录的用户名和密码我们就是POST请求传给服务器的。

3、USER NAME & USER PASS
    在AJAX请求的时候提供用户名和密码，一般项目中我们都不用，但是有些时候需要使用：服务器端为了保证相对安全，要求所有过来访问的请求都需要提供特定的用户密码，不提供的都不能进入到服务器，此时我们需要提供用户名和密码。

4、xhr.onreadystatechange 当AJAX状态发生改变的时候，就会触发这个事件
    xhr.readyState:AJAX状态
        0 unsend 未发送 当我们创建一个AJAX对象，默认的起始状态就是0
        1 opend  已经打开URL，也就是我们执行了xhr.open后状态就会变为1
        2 header_receive 响应头信息已经被客户端接收
        3 loading 响应主体内容正在返回
        4 done 响应主体内容已经返回成功
    服务器端返回给客户端的信息有两部分：响应头/响应主体， 响应头先返回，响应主体在返回

    xhr.status:HTTP网络代码（服务器端告诉客户端返回内容的一个状态）
        200 OK 成功

        301 Move Permanently 永久转移（在以前的HTTP版本中，301永久重定向）
        例如：www.360buy.com => www.jd.com
        302 Move temporarily 临时重定向（服务器的负载均衡）
        304 Not Modified 资源或者数据缓存
        3开头的是我们项目的不同情况的特殊处理，但是最后也会拿到我们想要的结果

        400 Bad Request 请求的参数出现错误
        401 Unauthorized 权限不够
        403 Forbidden 服务器已经接收请求，但是不予以任何的处理
        404 Not Found 请求的URL地址不存在
        4开头的基本上都是硬伤错误，不能从服务器获取想要的内容

        500 Internal Server Error 未知的服务器错误
        503 Server Unavailable 服务器超负荷，处理不过来
        5开头的基本上都是硬伤错误，一般都是服务器端的问题

5、xhr.send();发送，只有执行SEND后，AJAX请求这件事才算开始，之前的所有操作都是在做请求前的配置准备，只有当xhr.readyState==4的时候AJAX这件事才算结束

3、AJAX中的同步和异步
    第三个参数不写默认为true：异步请求  如果写false：同步请求
    var xhr = new XMLHttpRequest;
    xhr.open('GET','/getAllList',true);
    xhr.onreadystatechange=function(){
        if(xhr.readyState===4){
        console.log('inner');//后输出
        }
    }
    xhr.send();
    console.log('outer');//先输出
    ——————————————————————
    var xhr = new XMLHttpRequest;
        xhr.open('GET','/getAllList',false);
        xhr.onreadystatechange=function(){
            if(xhr.readyState===4){
            console.log('inner');//先输出
            }
        }
        xhr.send();
        console.log('outer');//后输出

扫盲模式开启：
    HTML：超文本标记语言，它里面使用的标签都是固定的（按照W3C标准）
    XHTML:更加严谨的HTML
    DHTML：动态的HTML，页面中的HTML都是动态增加的
    HTML+XHTML+DHTML都是一个东西

    XML：可扩展的标记语言，它里面使用的标签都是自己随便扩展的，真实项目中我们偶尔也会使用XML来存储一些数据，因为它可以使用一些自己定义的标记来表明数据，结构也是比较清晰的

